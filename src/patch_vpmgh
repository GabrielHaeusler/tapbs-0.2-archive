--- apbs-1.3-source/src/mg/apbs/vpmg.h	2010-10-20 15:16:35.000000000 -0400
+++ /home/user/workspace/apbs-1.3-patched/src/mg/apbs/vpmg.h	2011-06-19 17:31:14.000000000 -0400
@@ -764,5 +764,120 @@
                             operator around the current solution */
         );
 
+/** @brief  Alternative Vpmg constructor for accessibility map calculations.
+ *  Reduced memory consumption.
+ *  @ingroup  Vpmg
+ *  @author  Gernot Kieseritzky
+ */
+
+VEXTERNC Vpmg* Vpmg_map_ctor(
+        Vpmgp *parms,  /** PMG parameter object */
+        Vpbe *pbe  /** PBE-specific variables */
+        );
+
+VEXTERNC int Vpmg_map_ctor2(
+        Vpmg *thee,  /** Memory location for object */
+        Vpmgp *parms,  /** PMG parameter object */
+        Vpbe *pbe  /** PBE-specific variables */
+        );
+
+/** @brief  Alternative Vpmg_fillco used for accessibility map calculations.
+ *  Reduced memory consumption.
+ *  @ingroup  Vpmg
+ *  @author  Gernot Kieseritzky
+ */
+
+VEXTERNC int Vpmg_map_fillco(
+        Vpmg *thee,  /** Vpmg object */ 
+        Vsurf_Meth surfMeth,  /** Surface discretization method */
+        double splineWin  /** Spline window (in A) for surfMeth = 
+                            * VSM_SPLINE */
+        );
+
+/** @brief  Alternative Vpmg destructor after accessibility map calculations.
+ *  Reduced memory consumption.
+ *  @ingroup  Vpmg
+ *  @author  Gernot Kieseritzky
+ */
+
+VEXTERNC void Vpmg_map_dtor(
+        Vpmg **thee  /** Pointer to memory location of object to be 
+                      * destroyed */
+        );
+
+VEXTERNC void Vpmg_map_dtor2(
+        Vpmg *thee  /** Pointer to object to be destroyed */
+        );
+
+/** @brief  Alternative Vpmg constructor.
+ *  Reduced memory consumption.
+ *  @ingroup  Vpmg
+ *  @author  Gernot Kieseritzky
+ */
+
+VEXTERNC Vpmg* Vpmg_run_ctor(
+        Vpmgp *parms,  /** PMG parameter object */
+        Vpbe *pbe,  /** PBE-specific variables */
+        int focusFlag,  /** 1 for focusing, 0 otherwise */
+        Vpmg *pmgOLD,  /** Old Vpmg object to use for boundary conditions */
+        MGparm *mgparm,  /** MGparm parameter object for boundary 
+                          * conditions */
+        PBEparm_calcEnergy energyFlag  /** What types of energies to 
+                                        * calculate */
+        );
+
+VEXTERNC int Vpmg_run_ctor2(
+        Vpmg *thee,  /** Memory location for object */
+        Vpmgp *parms,  /** PMG parameter object */
+        Vpbe *pbe,  /** PBE-specific variables */
+        int focusFlag,  /** 1 for focusing, 0 otherwise */
+        Vpmg *pmgOLD,  /** Old Vpmg object to use for boundary conditions (can
+                         be VNULL if focusFlag = 0) */
+        MGparm *mgparm,  /** MGparm parameter object for boundary 
+                          * conditions (can be VNULL if focusFlag = 0) */
+        PBEparm_calcEnergy energyFlag  /** What types of energies to 
+                                        * calculate (ignored if focusFlag
+                                        * = 0) */
+        );
+
+/** @brief  Alternative Vpmg_fillco function.
+ *  Takes precalculated maps and copies pointers instead of calling fillcoCoef.
+ *  @ingroup  Vpmg
+ *  @author  Gernot Kieseritzky
+ */
+
+VEXTERNC int Vpmg_run_fillco(
+        Vpmg *thee,  /** Vpmg object */ 
+        Vsurf_Meth surfMeth,  /** Surface discretization method */
+        double splineWin,  /** Spline window (in A) for surfMeth = 
+                            * VSM_SPLINE */
+        Vchrg_Meth chargeMeth,  /** Charge discretization method */ 
+        int useDielXMap,  /** Boolean to use dielectric map argument */
+        Vgrid *dielXMap,  /** External dielectric map */
+        int useDielYMap,  /** Boolean to use dielectric map argument */
+        Vgrid *dielYMap,  /** External dielectric map */
+        int useDielZMap,  /** Boolean to use dielectric map argument */
+        Vgrid *dielZMap,  /** External dielectric map */
+        int useKappaMap,  /** Boolean to use kappa map argument */
+        Vgrid *kappaMap,  /** External kappa map */
+        int useChargeMap,  /** Boolean to use charge map argument */
+        Vgrid *chargeMap  /** External charge map */
+        );
+
+/** @brief  Alternative Vpmg destructor.
+ *  @ingroup  Vpmg
+ *  @author  Gernot Kieseritzky
+ */
+
+VEXTERNC void Vpmg_run_dtor(
+        Vpmg **thee  /** Pointer to memory location of object to be 
+                      * destroyed */
+        );
+
+VEXTERNC void Vpmg_run_dtor2(
+        Vpmg *thee  /** Pointer to object to be destroyed */
+        );
+
+
 #endif    /* ifndef _VPMG_H_ */
 
